//@BaseCode
using Microsoft.AspNetCore.Mvc;
using System.Linq.Dynamic.Core;

namespace SETemplate.WebApi.Controllers
{
    /// <summary>
    /// A base class for an MVC controller without view support.
    /// </summary>
    public abstract partial class ApiControllerBase : ControllerBase
    {
        /// <summary>
        /// Initializes the static ApiControllerBase class.
        /// </summary>
        static ApiControllerBase()
        {
            ClassConstructing();
            ClassConstructed();
        }
        /// <summary>
        /// Represents a partial method called before the constructor of the class is executed.
        /// </summary>
        /// <remarks>
        /// This method is automatically generated and can be implemented in partial classes.
        /// </remarks>
        static partial void ClassConstructing();
        /// <summary>
        /// This method is called after the class is constructed.
        /// </summary>
        static partial void ClassConstructed();

        #region properties
        protected ParsingConfig ParsingConfig
        {
            get
            {
                return new ParsingConfig
                {
                    // Erlaubt Class-Names („DateTime“) ohne Namensraum
                    ResolveTypesBySimpleName = true,

                    // Verhindert, dass über „new“ beliebige Typen zur Laufzeit erzeugt werden
                    AllowNewToEvaluateAnyType = false,

                    // Optional: Wenn du LINQ.GroupBy schon auf der Datenbank ausführen lassen willst:
                    EvaluateGroupByAtDatabase = true,
                };
            }
        }
        #endregion properties

        /// <summary>
        /// Initializes a new instance of the ApiControllerBase class.
        /// </summary>
        protected ApiControllerBase()
        {
            Constructing();
            Constructed();
        }
        /// <summary>
        /// This method is called during the construction of the object.
        /// </summary>
        /// <remarks>
        /// This method can be overridden by a partial class to include additional custom logic.
        /// It is defined as "partial" so that multiple partial classes can provide their own implementation of this method.
        /// </remarks>
        partial void Constructing();
        /// <summary>
        /// This method is a placeholder for code that is generated by a tool.
        /// It represents a partial method without an implementation.
        /// </summary>
        partial void Constructed();
    }
}
